const { api } = require('./src/utils/api');
const { subscribeMqtt, publishMqtt } = require('./src/mqtt/mqtt');
const { initModbus, connectModbusTCP, connectModbusRTU, pollingModbus,
    writeCoil: write,
    readCoils: read,
    waitCoils: wait
} = require('./src/modbus/modbus');

const PROPERTY_ID = 1;
const POST_ID = 1;

// const IP = '127.0.0.1';
// const PORT = 8502;
const PATH = 'COM4';

const INPUT = new Map([
    [0x0, 'SENSOR_1'],
    [0x1, 'SENSOR_2'],
    [0x2, 'END_PROGRAM']
]);

const OUTPUT = new Map([
    [0x600, 'PROGRAM_1'],
    [0x601, 'PROGRAM_2'],
    [0x602, 'PROGRAM_3'],
    [0x603, 'PROGRAM_4'],
    //[0x604, 'GATE_1_UP'],
    //[0x605, 'GATE_2_UP'],
    //[0x606, 'LED_1'],
    //[0x607, 'LED_2']
]);

const COMMANDS = {
    async write(data) {
        console.log('write', data);
        const { key, value, duration } = data.params;
        await write(key, value, duration);
    },
    async startOrder(data) {
        console.log( 'startOrder', data );
        const { program_code } = data.params;
        await wait(new Map([
            ['SENSOR_1', 0],
            ['SENSOR_2', 0],
        ]));
        await write(program_code, 1, 5000);
        await publishMqtt(`/property/${PROPERTY_ID}/${POST_ID}/action`, { ...data,
            action: 'startedOrder',
        }, { qos: 2 });
        await this.endOrder();
    },
    async endOrder(data) {
        console.log( 'endOrder', data );
        await wait(new Map([
            ['END_PROGRAM', 1],
        ]));
        await write('PROGRAM_1', 1, 5000);
        await publishMqtt(`/property/${PROPERTY_ID}/${POST_ID}/action`, { ...data,
            action: 'endedOrder',
        }, { qos: 2 });
    }
}

const runApp = async () => {
    try {
        const property = await api(`/master/property/${PROPERTY_ID}`);
        console.log('run', property.name);
        try {
            await runMqtt();
            await runModbus();
        }
        catch (error) {
            console.error('Error MQTT or Modbus:', error);
        }
    }
    catch (error) {
        console.error('Error getting data from API:', error);
        setTimeout(runApp, 10000);
    }
}

const runMqtt = async () => {
    await subscribeMqtt(`/property/${PROPERTY_ID}/${POST_ID}/command`, async data => {
        if (data && data.command && COMMANDS[data.command]) {
            COMMANDS[data.command](data);
        }
    }, { qos: 2 });
    await publishMqtt(`/property/${PROPERTY_ID}/${POST_ID}/action`, { action: 'connected' });
}

const runModbus = async () => {
    await initModbus({ INPUT, OUTPUT });
    //await connectModbusTCP(IP, PORT);
    await connectModbusRTU(PATH);
    await pollingModbus(['SENSOR_1', 'SENSOR_2'], async state => {
        const { SENSOR_1, SENSOR_2 } = state;
        const data = {
            action: 'state', ...state,
            is_busy: +(SENSOR_1 || SENSOR_2),
        };
        await publishMqtt(`/property/${PROPERTY_ID}/${POST_ID}/action`, data);
    });
}

module.exports = {
    runApp,
};