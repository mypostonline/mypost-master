const { api } = require('./src/utils/api');
const { subscribeMqtt, publishMqtt } = require('./src/mqtt/mqtt');
const { initGpio, pollingGpio,
    writePin: write,
    readPins: read,
    waitPins: wait
} = require('./src/gpio/gpio');

const PROPERTY_ID = 1;
const POST_ID = 1;

const INPUT = new Map([
    [21, 'SENSOR_1'],
    [20, 'SENSOR_2'],
    [16, 'END_PROGRAM']
]);

const OUTPUT = new Map([
    [17, 'PROGRAM_0'],
    [27, 'PROGRAM_1'],
    [22, 'PROGRAM_2'],
    [23, 'PROGRAM_3']
]);

const COMMANDS = {
    async write(data) {
        console.log('write', data);
        const { key, value, duration } = data.params;
        await write(key, value, duration);
    },
    async startOrder(data) {
        console.log( 'startOrder', data );
        const { program_code } = data.params;
        await wait({
            SENSOR_1: 0,
            SENSOR_2: 0,
        });
        await write(program_code, 1, 5000);
        await publishMqtt(`/property/${PROPERTY_ID}/${POST_ID}/action`, { ...data,
            action: 'startedOrder',
        }, { qos: 2 });
        await this.endOrder();
    },
    async endOrder(data) {
        console.log( 'endOrder', data );
        await wait({
            END_PROGRAM: 1
        });
        await write('PROGRAM_1', 1, 5000);
        await publishMqtt(`/property/${PROPERTY_ID}/${POST_ID}/action`, { ...data,
            action: 'endedOrder',
        }, { qos: 2 });
    }
}


const runApp = async () => {
    try {
        const property = await api(`/master/property/${PROPERTY_ID}`);
        console.log('run', property.name);
        try {
            await runMqtt();
            await runGpio();
        }
        catch (error) {
            console.error('Error MQTT or Gpio:', error);
        }
    }
    catch (error) {
        console.error('Error getting data from API:', error);
        setTimeout(runApp, 10000);
    }
}

const runMqtt = async () => {
    await subscribeMqtt(`/property/${PROPERTY_ID}/${POST_ID}/command`, async data => {
        if (data && data.command && COMMANDS[data.command]) {
            COMMANDS[data.command](data);
        }
    }, { qos: 2 });
    await publishMqtt(`/property/${PROPERTY_ID}/${POST_ID}/action`, { action: 'connected' });
}

const runGpio = async () => {
    await initGpio({ INPUT, OUTPUT });
    await pollingGpio(['SENSOR_1', 'SENSOR_2'], async state => {
        const { SENSOR_1, SENSOR_2 } = state;
        const data = {
            action: 'state', ...state,
            is_busy: +(SENSOR_1 || SENSOR_2),
        };
        await publishMqtt(`/property/${PROPERTY_ID}/${POST_ID}/action`, data);
    });
}

module.exports = {
    runApp,
};